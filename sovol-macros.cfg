[gcode_macro mainled_on]
gcode:
    SET_LED LED=main_led WHITE=1

[gcode_macro mainled_off]
gcode:
    SET_LED LED=main_led WHITE=0

#--------------------------------------------------------------------#
#--------------------------------------------------------------------#

[force_move]
enable_force_move: True

[gcode_macro _global_var]
variable_pause_park:{'x': 0, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park:{'x': 0, 'y': 350, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 345
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 60
variable_load_filament_extruder_temp: 230
variable_heat_soak_time: 0 # in minutes
gcode:

[gcode_macro START_PRINT]
description: Unified start for SV08 + Eddy‑NG
variable_state: "Prepare"

gcode:
  {% set BED_TEMP      = params.BED_TEMP|default(60)|int %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|int %}

  # ---------- fast pre‑heat just enough to purge ----------
  M117 Starting heating
  M104  S150                         ; nozzle to 150 °C (ooze‑safe)
  M140  S{BED_TEMP}                  ; bed to final
  M190  S{BED_TEMP}                  ; wait bed
  M109  S150                         ; wait nozzle 150 °C

  # ---------- home & gantry level ----------
  G28
  QUAD_GANTRY_LEVEL BED_TEMP={BED_TEMP}
  G28 Z

  # ---------- clean & tap ----------
  M117 Cleaning for tap
  CLEAN_NOZZLE                       ; uses the current 150 °C
  M117 Taping
  G1 X177 Y177 Z2 F6000
  PROBE_EDDY_NG_TAP                  ; sets Z zero

  # ---------- load or build mesh ----------
  M117 BED MESHING
  BED_MESH_CALIBRATE_BASE ADAPTIVE=1 METHOD=rapid_scan

  # ---------- final temps ----------
  M117 FINAL HEATING
  M104  S{EXTRUDER_TEMP}
  M109  S{EXTRUDER_TEMP}

  # ---------- purge ----------
  M117 PURGING and PRIMING
  MULTILINE_PURGE
  M117 START UP COMPLETE
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Start"'

[gcode_macro END_PRINT]
description: Clean, safe end‑of‑print routine
gcode:
  M400
  M117 Print Complete

  # — retract if at temp and filament sensor present —
  {% if printer['filament_switch_sensor filament_sensor'].enable and
        (printer.extruder.target > 0 and printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp)
  %}
    G1 E-5 F2700
  {% endif %}

  # — lift Z up into safe zone —
  G91
  G1 Z1 X5 Y5 F3000
  G1 Z24 F3000
  G90

  # — move to park position —
  G1 X0 Y360 F9000

  # — clear probe mesh and reset tap offset so next print will recalibrate —
  PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0
  BED_MESH_CLEAR

  # — turn everything off —
  _ALL_FAN_OFF
  TURN_OFF_HEATERS

  # — disable motors & reset any pause state —
  M84 X Y Z E
  CLEAR_PAUSE


[gcode_macro MULTILINE_PURGE] #added by obi
description: 4‑line X‑axis purge
gcode:
    G90                     ; absolute positioning
    M83                     ; relative extrusion
    G92 E0                  ; reset extruder

    G1 X77 Y0 Z0.4 F6000
    G1 X277 E40 F1000
    G1 Y1.5 F500
    G1 X77 E40 F1000
    G1 Y3 F500
    G1 X277 E40 F1000
    G1 Y4.5 F500
    G1 X77 E40 F1000
    G1 E-0.5 Z1
    G1 X60 F6000
    G1 Z0.1 F500
    G1 Y0 F500
    G1 Y4.5 F6000
    G1 Z2
    G92 E0
    M82                     ; back to absolute extrusion
    
[gcode_macro _IDLE_TIMEOUT]
gcode:
    {% if printer.print_stats.state == "paused" %}
      RESPOND TYPE=echo MSG="No operations in 10min!"
    {% else %}
     M84
     TURN_OFF_HEATERS
    {% endif %}

[delayed_gcode exhaust_fan_off]
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    # Run the exhaust fan for another 2min after the other fans and then turn it off
    # UPDATE_DELAYED_GCODE ID=exhaust_fan_off DURATION=120
    M107


[gcode_macro CLEAN_NOZZLE]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
       G28
    {% endif %}
    M117 Clean nozzle at current temp...
    G91
    G1 Z10 F300
    G90
    M106 S255
    G1 X315 Y360 F9000
    G1 Z0.2 F300
    G1 X352 F4500
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X325
    G1 Y356 X324 Z5
    G1 Z0.2
    G1 Y360 X324
    G1 Y357 X326
    G1 Y360 X326
    G1 Y357 X328
    G1 Y360 X330
    G1 Y357 X332
    G1 Y360 X334
    G1 Y357 X336
    G1 Y360 X338
    G1 Y357 X340
    G1 Y360 X324
    G1 Y357 X326
    G1 Y360 X326
    G1 Y357 X328
    G1 Y360 X330
    G1 Y357 X332
    G1 Y360 X334
    G1 Y357 X336
    G1 Y360 X338
    G1 Y357 X340
    G1 Y360 X324
    G1 Y357 X326
    G1 Y360 X326
    G1 Y357 X328
    G1 Y360 X330
    G1 Y357 X332
    G1 Y360 X334
    G1 Y357 X336
    G1 Y360 X338
    M400
    M117 Finished cleaning
    M107 
    G91
    G1 Z10 F300
    G90
    G28 Z0

# Bring the nozzle to the center of the bed
[gcode_macro CENTER]
gcode:
    G0  X175 Y175 F5000

[delayed_gcode TEST_BELT]
initial_duration: 0.3
gcode:
    {% set x_freq = printer.save_variables.variables.x_freq|float %}
    {% set y_freq = printer.save_variables.variables.y_freq|float %}
    {% set show_freq = printer.save_variables.variables.show_freq %}
    {% if show_freq == 1 %}
        M117 x {x_freq}, y {y_freq}
        SAVE_VARIABLE VARIABLE=show_freq VALUE=0
    {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing:QUAD_GANTRY_LEVEL_BASE
# Accept an optional BED_TEMP parameter
# so we can level at the same temperature we're about to print at.
# Usage: QUAD_GANTRY_LEVEL BED_TEMP=60
gcode:
    {% set mesh_temp = params.BED_TEMP
                       |default(printer.heater_bed.target|int)
                       |int %}
                       
    M190 S{mesh_temp}            ; wait until bed hits mesh_temp

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    SAVE_GCODE_STATE NAME=STATE_QGL
    BED_MESH_CLEAR

    {% if not printer.quad_gantry_level.applied %}
        M117 SAFE QGL 8 mm
        QUAD_GANTRY_LEVEL_BASE horizontal_move_z=8 retry_tolerance=1
    {% endif %}

    M117 PRECISION QGL 2 mm
    QUAD_GANTRY_LEVEL_BASE

    RESTORE_GCODE_STATE NAME=STATE_QGL

    M117 Ready                  ; ← clears the old message
    
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
    
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target_temp  = printer.heater_bed.target|int %}

    {action_respond_info("Check Heating!")}
    {% if printer.heater_bed.temperature != mesh_calibrate_temp %}
        {action_respond_info("The bed target temperature was not reached!")}
        {action_respond_info("Bed heating...")}
        {% if current_target_temp <= mesh_calibrate_temp %}
          M190 S{mesh_calibrate_temp}
        {% else %}
          M190 S{current_target_temp}
        {% endif %}
    {% endif %}

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    BED_MESH_CLEAR
    
    BED_MESH_CALIBRATE_BASE ADAPTIVE=1 METHOD=rapid_scan

    {% if current_target_temp == 0 %}
        M140 S0  
    {% endif %}

[gcode_macro G34]
gcode:
    BED_MESH_CLEAR 
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
      G28
    {% else %}
      G28 Z
    {% endif %}
    QUAD_GANTRY_LEVEL 
    G28 Z 
    G0 X175 Y175 Z30 F3600

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
    BED_MESH_PROFILE LOAD=default

[delayed_gcode _print_start_wait]
gcode:
    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
        {action_respond_info("Prepare->Heating!")}
    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
        {action_respond_info("Heating->Start!")}
    {% endif %}

    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
        START_PRINT
    {% endif %}


[gcode_macro CANCEL_PRINT]
description: 
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set x_park = printer['gcode_macro _global_var'].cancel_park.x|float %}
    {% set y_park = printer['gcode_macro _global_var'].cancel_park.y|float %}
    {% set z_park = printer['gcode_macro _global_var'].cancel_park.z|float %}
    {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    {% set e_restract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    CANCEL_PRINT_BASE

    M117 Print canceled!
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == True and 
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-{e_restract} F500
        {% else %}
            {action_respond_info("Nozzle not hot enough")}
        {% endif %}
    {% endif %}

    {%if (printer.gcode_move.position.z + 10) < z_lift_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
    {% endif %}
        G90
        G1 X{x_park} Y{y_park} F9000

    TURN_OFF_HEATERS
    _ALL_FAN_OFF

    CLEAR_PAUSE
    M84 X Y Z E

    M117 Ready
    {action_respond_info("Cancel Print Success!")}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0


[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% if printer.pause_resume.is_paused == False %}
        {% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
        {% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
        {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
        {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}

        {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
        
        {action_respond_info("Pause Print!")}
        
        PAUSE_BASE
        M117 Pause Print!!!
        G91
        {% if (printer.gcode_move.position.z + 5) < z_lift_max %}
            G1 Z+5 F3000
        {% else %}
            G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
        {% endif %}
        G90
        {% if printer.gcode_move.position.x != x_park and
                printer.gcode_move.position.y != y_park     
        %}
            G1 X{x_park} Y{y_park} F{printer["gcode_macro _global_var"].pause_resume_travel_speed * 60}
        {% endif %}

        M104 S{printer.extruder.target}
    
        {% if state == 'normal' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                {% if printer['filament_switch_sensor filament_sensor'].enabled == True and 
                    printer['filament_switch_sensor filament_sensor'].filament_detected == True
                %}
                    G91
                    G1 E-{e_restract} F300
                    G90
                {% elif printer['filament_switch_sensor filament_sensor'].enabled == True and 
                        printer['filament_switch_sensor filament_sensor'].filament_detected != True %}
                    G91
                    G1 E+95 F300
                    G1 E-10 F1500
                    G1 E-20 F600
                    M400
                    G4 P3000
                    G1 E-50 F300 
                    G90
                {% endif %}
            {% endif %}
        {% elif state == 'filament_change' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                G91
                G1 E+25 F300
                G1 E-10 F1500
                G1 E-20 F600
                M400
                G4 P3000
                G1 E-50 F300 
                G90
            {% endif %}
        {% endif %}
    {% endif %}


[delayed_gcode _resume_wait]
gcode:
    {% if printer['gcode_macro RESUME'].execute|lower != 'false' %}
        RESUME
    {% endif %}


[gcode_macro RESUME]
description: Pause the actual running print
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set extruder_target_temp = printer.extruder.target|int %}

    {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}

    {% if state == 'filament_change' %}
        {% if printer["filament_switch_sensor filament_sensor"].enable == True and
              printer["filament_switch_sensor filament_sensor"].filament_detected != True
        %}
            {action_respond_info("Please Insert filament in Sensor!")}
        {% else %}
            {% if printer.extruder.temperature + 5 >= printer.extruder.target %}
                G91
                G1 E30 F300
                G1 E10 F150
                G90
            {% else %}
                M104 S{extruder_target_temp}
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_target_temp}
                G91
                G1 E30 F300
                G1 E10 F150
                G90
            {% endif %}
            {action_respond_info("Print resumming!")}
            RESUME_BASE
        {% endif %}
    {% elif state == 'normal' %}
        {% if printer['filament_switch_sensor filament_sensor'].enable != True and
              printer['filament_switch_sensor filament_sensor'].filament_detected != True
        %}
            {action_respond_info("Please Insert filament in Sensor!")}
        {% else %}
            {action_respond_info("Print resumming!")}
            G91
            G1 E{e_restract} F300
            G90
            M117 Printing now!!!
            RESUME_BASE
        {% endif %}
    {% endif %}


[gcode_macro LOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set current_target_temp  = printer.extruder.target|int %}

    {% if printer.print_stats.state != "printing" %}
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Nozzle heating...
            {action_respond_info("Nozzle not hot enough!")}
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        M117 Extruding...
        G91 
        G1 E75 F300
        G1 E30 F150
        G1 E-2 F300
        G90
        M400
        M117 Filament loaded.
        M400
        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("Don't load filament during printing!!!")}
    {% endif %}

    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set current_target_temp  = printer.extruder.target|int %}

    {% if printer.print_stats.state != "printing" %}
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Nozzle heating...
            {action_respond_info("Nozzle not hot enough!")}
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        M117 Retracting...
        G91
        G1 E+25 F300
        G1 E-10 F1500
        G1 E-20 F600
        M400
        G4 P3000
        G1 E-50 F300 
        G90
        M400
        M117 Filament ejected.
        M400
        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("Don't unload filament during printing!!!")}
    {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:    
    {% set s = params.S|float %}    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-1} MAXIMUM={s+1}   
    {% endif %}
    
[gcode_macro M190]
rename_existing: M99190
gcode:    
    {% set s = params.S|float %}
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+1}  
    {% endif %}

    
[gcode_macro M600]
gcode:
    PAUSE STATE=filament_change

